import main.ast.nodes.Expr.FunctionCallExpr;
import main.ast.nodes.ExternalDeclaration.FuncDefExtDec;
import main.ast.nodes.Program;
import main.grammar.SimpleLangLexer;
import main.grammar.SimpleLangParser;
import main.symbolTable.SymbolTable;
import main.visitor.*;
import main.typeErrors.TypeError;
import main.vulnerabilityErrors.VulnerabilityError;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import java.io.IOException;
import java.lang.reflect.Array;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

public class SimpleLang {
    public static void main(String[] args) throws IOException {
        String sourceCode = new String(Files.readAllBytes(Paths.get(args[0])));
        String convertedCode = CodeFormatter.format(sourceCode);

        ConstValueChanger constValueChanger = new ConstValueChanger();
        String convertedCode1 = constValueChanger.transform(convertedCode);

        CharStream reader = CharStreams.fromString(convertedCode1);
        SimpleLangLexer simpleLangLexer = new SimpleLangLexer(reader);
        CommonTokenStream tokens = new CommonTokenStream(simpleLangLexer);
        SimpleLangParser flParser = new SimpleLangParser(tokens);
        Program program = flParser.program().programRet;
        System.out.println();

        // Name Analysis Phase
        NameAnalyser nameAnalyser = new NameAnalyser();
        nameAnalyser.visit(program);
        ArrayList<VulnerabilityError> unitializedUsageErrors = nameAnalyser.getVulnerabilityErrors();

        //VulnerabilityError

        VulnerabilityAnalyzer vulnerabilityAnalyzer = new VulnerabilityAnalyzer();
        vulnerabilityAnalyzer.setCurrentSymbolTable(SymbolTable.root);
        vulnerabilityAnalyzer.visit(program);
        vulnerabilityAnalyzer.addErrors(unitializedUsageErrors);
        int isThereVulnError = 0;
        if(vulnerabilityAnalyzer.getVulnerabilityErrors().size()!=0)
            isThereVulnError = 1;
        // Print all errors
        for (VulnerabilityError error : vulnerabilityAnalyzer.getVulnerabilityErrors()) {
            System.out.println(error.getMessage());
        }
        if(isThereVulnError == 0) {
            TypeChecker typeChecker = new TypeChecker();
            typeChecker.visit(program);
        }

        SymbolTable.root.hashCode();
        System.out.println();
    }
}