package main.visitor;

import main.ast.nodes.*;
import main.ast.nodes.DirectDeclarator.ArrayDeclarator;
import main.ast.nodes.DirectDeclarator.FunctionDeclarator;
import main.ast.nodes.DirectDeclarator.IdentifierDeclarator;
import main.ast.nodes.DirectDeclarator.NestedDeclarator;
import main.ast.nodes.Expr.*;
import main.ast.nodes.ExternalDeclaration.ExternalDeclaration;
import main.ast.nodes.ExternalDeclaration.FuncDefExtDec;
import main.ast.nodes.Stmt.*;
import main.ast.nodes.ExternalDeclaration.*;
import main.symbolTable.SymbolTable;
import main.symbolTable.exceptions.ItemNotFoundException;
import main.symbolTable.item.FuncDecSymbolTableItem;
import main.symbolTable.item.VarDecSymbolTableItem;
import main.vulnerabilityErrors.UserControlledMalloc;
import main.vulnerabilityErrors.VulnerabilityError;

import java.util.ArrayList;

public class UserControlledMallocAnalyzer extends Visitor<Void> {
    private ArrayList<VulnerabilityError> vulnerabilityErrors = new ArrayList<>();
    private SymbolTable currentSymbolTable;

    public ArrayList<VulnerabilityError> getVulnerabilityErrors() {
        return vulnerabilityErrors;
    }

    public void setCurrentSymbolTable(SymbolTable symbolTable) {
        this.currentSymbolTable = symbolTable;
    }

    private boolean isInputDerivedVariable(String varName, SymbolTable symbolTable) {
        try {
            String key = VarDecSymbolTableItem.START_KEY + varName;
            VarDecSymbolTableItem varItem = (VarDecSymbolTableItem) SymbolTable.top.getItem(key);
            return varItem.getIsInput() == 1;
        } catch (ItemNotFoundException e) {
            return false;
        }
    }

    private void checkMallocArgument(Expr arg, int line) {
        if (arg instanceof Identifier) {
            String varName = ((Identifier) arg).getName();
            if (isInputDerivedVariable(varName, currentSymbolTable)) {
                vulnerabilityErrors.add(new UserControlledMalloc(line));
            }
        } else if (arg instanceof ArrayIndexingExpr) {
            ArrayIndexingExpr arrayExpr = (ArrayIndexingExpr) arg;
            if (arrayExpr.getArrayExpr() instanceof Identifier) {
                String arrayName = ((Identifier) arrayExpr.getArrayExpr()).getName();
                if (arrayName.equals("argv")) {
                    vulnerabilityErrors.add(new UserControlledMalloc(line));
                }
            }
            checkMallocArgument(arrayExpr.getIndexExpr(), line);
        } else if (arg instanceof BinaryExpr) {
            BinaryExpr binaryExpr = (BinaryExpr) arg;
            checkMallocArgument(binaryExpr.getFirstOperand(), line);
            checkMallocArgument(binaryExpr.getSecondOperand(), line);
        } else if (arg instanceof UnaryExpr) {
            checkMallocArgument(((UnaryExpr) arg).getOperand(), line);
        } else if (arg instanceof CastExpr) {
            checkMallocArgument(((CastExpr) arg).getExpr(), line);
        }
    }

    @Override
    public Void visit(Program program) {
        SymbolTable.root = program.getSymbol_table();
        SymbolTable.top = SymbolTable.root;
        program.getTranslationUnit().accept(this);
        return null;
    }

    @Override
    public Void visit(TranslationUnit translationUnit) {
        for (ExternalDeclaration extDecl : translationUnit.getExternalDeclarations()) {
            if (extDecl != null) {
                extDecl.accept(this);
            }
        }
        return null;
    }

    @Override
    public Void visit(DeclarationSpecifiers declarationSpecifiers) {
        return null;
    }

    @Override
    public Void visit(Declarator declarator) {
        return null;
    }

    @Override
    public Void visit(DeclarationList declarationList) {
        return null;
    }

    @Override
    public Void visit(FunctionCallExpr functionCallExpr) {
        if (functionCallExpr.getExpr() instanceof Identifier) {
            String funcName = ((Identifier) functionCallExpr.getExpr()).getName();
            if (funcName.equals("malloc") && functionCallExpr.getArgumentExpressionList() != null) {
                if (functionCallExpr.getArgumentExpressionList() instanceof CommaExpr) {
                    CommaExpr commaExpr = (CommaExpr) functionCallExpr.getArgumentExpressionList();
                    for (Expr expr : commaExpr.getExpressions()) {
                        checkMallocArgument(expr, functionCallExpr.getLine());
                    }
                } else {
                    checkMallocArgument(functionCallExpr.getArgumentExpressionList(), functionCallExpr.getLine());
                }
            }
        }
        
        if (functionCallExpr.getArgumentExpressionList() != null) {
            functionCallExpr.getArgumentExpressionList().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(CastExpr castExpr) {
        if (castExpr.getExpr() != null) {
            castExpr.getExpr().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(PrefixUnaryExpr prefixUnaryExpr) {
        return null;
    }

    @Override
    public Void visit(SizeOfExpr sizeOfExpr) {
        return null;
    }

    @Override
    public Void visit(CompoundStatement compoundStatement) {
        if (compoundStatement.getSymbolTable() != null) {
            SymbolTable.push(compoundStatement.getSymbolTable());
        }
        
        for (BlockItem block : compoundStatement.getBlocks()) {
            if (block != null) {
                if (block.getDeclaration() != null) {
                    block.getDeclaration().accept(this);
                } else if (block.getStatement() != null) {
                    block.getStatement().accept(this);
                }
            }
        }
        
        if (compoundStatement.getSymbolTable() != null) {
            SymbolTable.pop();
        }
        return null;
    }

    @Override
    public Void visit(Identifier identifier) throws ItemNotFoundException {
        return null;
    }

    @Override
    public Void visit(Constant constant) {
        return null;
    }

    @Override
    public Void visit(ExpressionStatement expressionStatement) {
        if (expressionStatement.getExprStmt() != null) {
            expressionStatement.getExprStmt().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(SelectionStatement selectionStatement) {
        if (selectionStatement.getCondition() != null) {
            selectionStatement.getCondition().accept(this);
        }
        if (selectionStatement.getThenStmt() != null) {
            selectionStatement.getThenStmt().accept(this);
        }
        if (selectionStatement.getElseStmt() != null) {
            selectionStatement.getElseStmt().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(IterationStatement iterationStatement) {
        if (iterationStatement.getCondition() != null) {
            iterationStatement.getCondition().accept(this);
        }
        if (iterationStatement.getStatement() != null) {
            iterationStatement.getStatement().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(ForCondition forCondition) {
        return null;
    }

    @Override
    public Void visit(ForExpr forExpr) {
        return null;
    }

    @Override
    public Void visit(ForDeclaration forDeclaration) {
        return null;
    }

    @Override
    public Void visit(InitDeclaratorList initDeclaratorList) {
        for (InitDeclarator init : initDeclaratorList.getInitDeclarators()) {
            if (init != null) {
                init.accept(this);
            }
        }
        return null;
    }

    @Override
    public Void visit(InitDeclarator initDeclarator) {
        if (initDeclarator.getInitializer() != null) {
            initDeclarator.getInitializer().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(Initializer initializer) {
        if (initializer.getExpr() != null) {
            initializer.getExpr().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(DesignationInitializerTuple designationInitializerTuple) {
        return null;
    }

    @Override
    public Void visit(InitializerList initializerList) {
        return null;
    }

    @Override
    public Void visit(Designation designation) {
        return null;
    }

    @Override
    public Void visit(Designator designator) {
        return null;
    }

    @Override
    public Void visit(JumpStatement jumpStatement) {
        return null;
    }

    @Override
    public Void visit(TypeName typeName) {
        return null;
    }

    @Override
    public Void visit(CompoundLiteralExpr compoundLiteralExpr) {
        return null;
    }

    @Override
    public Void visit(ArrayIndexingExpr arrayIndexingExpr) {
        return null;
    }

    @Override
    public Void visit(AssignmentExpr assignmentExpr) {
        if (assignmentExpr.getRightExpr() != null) {
            assignmentExpr.getRightExpr().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(DeclarationSpecifier declarationSpecifier) {
        return null;
    }

    @Override
    public Void visit(Pointer pointer) {
        return null;
    }

    @Override
    public Void visit(NestedDeclarator nestedDeclarator) {
        return null;
    }

    @Override
    public String visit(IdentifierDeclarator identifierDeclarator) {
        return "";
    }

    @Override
    public Void visit(ArrayDeclarator arrayDeclarator) {
        return null;
    }

    @Override
    public Void visit(FunctionDeclarator functionDeclarator) {
        return null;
    }

    @Override
    public Void visit(ParameterList parameterList) {
        return null;
    }

    @Override
    public Void visit(ParameterDeclaration parameterDeclaration) {
        return null;
    }

    @Override
    public Void visit(IdentifierList identifierList) {
        return null;
    }

    @Override
    public Void visit(BlockItem blockItem) {
        if (blockItem.getDeclaration() != null) {
            blockItem.getDeclaration().accept(this);
        } else if (blockItem.getStatement() != null) {
            blockItem.getStatement().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(AbstractDeclarator abstractDeclarator) {
        return null;
    }

    @Override
    public Void visit(DirectAbstractDeclarator directAbstractDeclarator) {
        return null;
    }

    @Override
    public Void visit(StringLiteral stringLiteral) {
        return null;
    }

    @Override
    public Void visit(SpecifierQualifierList specifierQualifierList) {
        return null;
    }

    @Override
    public Void visit(BinaryExpr binaryExpr) {
        if (binaryExpr.getFirstOperand() != null) {
            binaryExpr.getFirstOperand().accept(this);
        }
        if (binaryExpr.getSecondOperand() != null) {
            binaryExpr.getSecondOperand().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(UnaryExpr unaryExpr) {
        if (unaryExpr.getOperand() != null) {
            unaryExpr.getOperand().accept(this);
        }
        return null;
    }

    @Override
    public Void visit(TernaryExpr ternaryExpr) {
        return null;
    }

    @Override
    public Void visit(CommaExpr commaExpr) {
        return null;
    }

    @Override
    public Void visit(FuncDefExtDec funcDefExtDec) {
        String funcName = funcDefExtDec.getFuncName();
        SymbolTable.push(funcDefExtDec.getSymbol_table());
        
        // If this is main and it has parameters, mark argv as input
        if (funcName.equals("main")) {
            try {
                String key = VarDecSymbolTableItem.START_KEY + "argv";
                VarDecSymbolTableItem varItem = (VarDecSymbolTableItem) SymbolTable.top.getItem(key);
                varItem.setIsInput(1);
            } catch (ItemNotFoundException ignored) {
                // argv not found in symbol table
            }
        }
        
        if (funcDefExtDec.getCompoundStatement() != null) {
            funcDefExtDec.getCompoundStatement().accept(this);
        }

        SymbolTable.pop();
        return null;
    }

    @Override
    public Void visit(TypeSpecifier typeSpecifier) {
        return null;
    }

    @Override
    public Void visit(DecExtDec declaration) {
        if (declaration.getInitDeclaratorList() != null) {
            declaration.getInitDeclaratorList().accept(this);
        }
        return null;
    }
} 