package main.visitor;

import main.ast.nodes.*;
import main.ast.nodes.DirectDeclarator.*;
import main.ast.nodes.Expr.*;
import main.ast.nodes.ExternalDeclaration.*;
import main.ast.nodes.Stmt.*;
import main.symbolTable.SymbolTable;
import main.vulnerabilityErrors.*;

import java.lang.reflect.Array;
import java.util.*;

public class VulnerabilityAnalyzer extends Visitor<Void> {
    private ArrayList<VulnerabilityError> vulnerabilityErrors;
    private SymbolTable currentSymbolTable;
    private final MemoryLeakAnalyzer memoryLeakAnalyzer;
    private final UserControlledMallocAnalyzer userControlledMallocAnalyzer;

    public void addErrors(ArrayList<VulnerabilityError> newErrors){
        this.vulnerabilityErrors.addAll(newErrors);
    }
    
    public VulnerabilityAnalyzer() {
        this.vulnerabilityErrors = new ArrayList<>();
        this.memoryLeakAnalyzer = new MemoryLeakAnalyzer();
        this.userControlledMallocAnalyzer = new UserControlledMallocAnalyzer();
    }

    public void setCurrentSymbolTable(SymbolTable currentSymbolTable) {
        this.currentSymbolTable = currentSymbolTable;
    }

    public ArrayList<VulnerabilityError> getVulnerabilityErrors() {
        return vulnerabilityErrors;
    }

    @Override
    public Void visit(Program program) {
        // Run analyzers
        program.accept(memoryLeakAnalyzer);
        program.accept(userControlledMallocAnalyzer);
        
        // Collect errors from
        vulnerabilityErrors.addAll(memoryLeakAnalyzer.getVulnerabilityErrors());
        vulnerabilityErrors.addAll(userControlledMallocAnalyzer.getVulnerabilityErrors());
        // Remove duplicates while preserving order
        vulnerabilityErrors = new ArrayList<>(new LinkedHashSet<>(vulnerabilityErrors));
        return null;
    }

    // Default implementations for other visit methods
    @Override public Void visit(TranslationUnit translationUnit) { return null; }
    @Override public Void visit(FuncDefExtDec funcDefExtDec) { return null; }
    @Override public Void visit(DecExtDec declaration) { return null; }
    @Override public Void visit(InitDeclaratorList initDeclaratorList) { return null; }
    @Override public Void visit(InitDeclarator initDeclarator) { return null; }
    @Override public Void visit(Initializer initializer) { return null; }
    @Override public Void visit(CompoundStatement compoundStatement) { return null; }
    @Override public Void visit(ExpressionStatement expressionStatement) { return null; }
    @Override public Void visit(AssignmentExpr assignmentExpr) { return null; }
    @Override public Void visit(FunctionCallExpr functionCall) { return null; }
    @Override public Void visit(Constant constant) { return null; }
    @Override public Void visit(BinaryExpr binaryExpr) { return null; }
    @Override public Void visit(UnaryExpr unaryExpr) { return null; }
    @Override public Void visit(TernaryExpr ternaryExpr) { return null; }
    @Override public Void visit(CommaExpr commaExpr) { return null; }
    @Override public Void visit(DeclarationSpecifier declarationSpecifier) { return null; }
    @Override public Void visit(Pointer pointer) { return null; }
    @Override public Void visit(NestedDeclarator nestedDeclarator) { return null; }
    @Override public String visit(IdentifierDeclarator identifierDeclarator) { return ""; }
    @Override public Void visit(ArrayDeclarator arrayDeclarator) { return null; }
    @Override public Void visit(FunctionDeclarator functionDeclarator) { return null; }
    @Override public Void visit(ParameterList parameterList) { return null; }
    @Override public Void visit(ParameterDeclaration parameterDeclaration) { return null; }
    @Override public Void visit(IdentifierList identifierList) { return null; }
    @Override public Void visit(BlockItem blockItem) { return null; }
    @Override public Void visit(AbstractDeclarator abstractDeclarator) { return null; }
    @Override public Void visit(DirectAbstractDeclarator directAbstractDeclarator) { return null; }
    @Override public Void visit(StringLiteral stringLiteral) { return null; }
    @Override public Void visit(SpecifierQualifierList specifierQualifierList) { return null; }
    @Override public Void visit(SelectionStatement selectionStatement) { return null; }
    @Override public Void visit(IterationStatement iterationStatement) { return null; }
    @Override public Void visit(ForCondition forCondition) { return null; }
    @Override public Void visit(ForExpr forExpr) { return null; }
    @Override public Void visit(ForDeclaration forDeclaration) { return null; }
    @Override public Void visit(DesignationInitializerTuple designationInitializerTuple) { return null; }
    @Override public Void visit(InitializerList initializerList) { return null; }
    @Override public Void visit(Designation designation) { return null; }
    @Override public Void visit(Designator designator) { return null; }
    @Override public Void visit(JumpStatement jumpStatement) { return null; }
    @Override public Void visit(TypeName typeName) { return null; }
    @Override public Void visit(CompoundLiteralExpr compoundLiteralExpr) { return null; }
    @Override public Void visit(ArrayIndexingExpr arrayIndexingExpr) { return null; }
    @Override public Void visit(CastExpr castExpr) { return null; }
    @Override public Void visit(PrefixUnaryExpr prefixUnaryExpr) { return null; }
    @Override public Void visit(SizeOfExpr sizeOfExpr) { return null; }
    @Override public Void visit(TypeSpecifier typeSpecifier) { return null; }
    @Override public Void visit(DeclarationSpecifiers declarationSpecifiers) { return null; }
    @Override public Void visit(Declarator declarator) { return null; }
    @Override public Void visit(DeclarationList declarationList) { return null; }
    @Override public Void visit(Identifier identifier) { return null; }
}