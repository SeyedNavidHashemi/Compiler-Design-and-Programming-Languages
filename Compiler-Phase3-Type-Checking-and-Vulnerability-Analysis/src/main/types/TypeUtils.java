// File: main/types/TypeUtils.java
package main.types;

public class TypeUtils {

    public static boolean isInteger(Type t) {
        return t instanceof IntegerType;
    }

    public static boolean isArithmetic(Type t) {
        return t instanceof IntegerType || t instanceof FloatType || t instanceof DoubleType;
    }

    public static Type integerPromotion(Type t) {
        if (t instanceof IntegerType) {
            IntegerType i = (IntegerType) t;
            if (i.getRank() < 3 && !i.isUnsigned()) {
                return new IntType();
            }
        }
        return t;
    }

    public static Type usualArithmeticConversion(Type a, Type b) {
        if (!isArithmetic(a) || !isArithmetic(b)) return null;

        if (a instanceof DoubleType || b instanceof DoubleType) return new DoubleType();
        if (a instanceof FloatType || b instanceof FloatType) return new FloatType();

        a = integerPromotion(a);
        b = integerPromotion(b);

        if (!(a instanceof IntegerType) || !(b instanceof IntegerType)) return null;
        IntegerType ia = (IntegerType) a;
        IntegerType ib = (IntegerType) b;

        // Same signedness
        if (ia.isUnsigned() == ib.isUnsigned()) {
            return ia.getRank() >= ib.getRank() ? ia : ib;
        }

        // Mixed signedness
        IntegerType signed = ia.isUnsigned() ? ib : ia;
        IntegerType unsigned = ia.isUnsigned() ? ia : ib;

        if (unsigned.getRank() >= signed.getRank()) {
            return unsigned;
        }

        return new UnsignedIntType();
    }

    public static boolean isAssignable(Type l, Type r) {
        if (l.equals(r)) return true;

        // Integer promotions for assignment to int
        if (l instanceof IntType && r instanceof IntegerType) {
            return true;  // Allow all integer types to be assigned to int
        }

        if (isArithmetic(l) && isArithmetic(r)) {
            // No implicit conversion from floating point to integer
            if ((r instanceof DoubleType || r instanceof FloatType) && l instanceof IntegerType) {
                return false;
            }

            // Allow integer to floating point
            if (r instanceof IntegerType && (l instanceof FloatType || l instanceof DoubleType)) {
                return true;
            }

            // Allow float to double
            if (r instanceof FloatType && l instanceof DoubleType) {
                return true;
            }

            // For integers, allow assignment if types are compatible
            if (r instanceof IntegerType && l instanceof IntegerType) {
                return true;
            }
        }

        if (l instanceof StringType && r instanceof StringType) return true;
        if (l instanceof CharType && r instanceof CharType) return true;
        if (l instanceof BooleanType && r instanceof BooleanType) return true;

        return false;
    }

    public static boolean areComparableForEquality(Type a, Type b) {
        if (a.equals(b)) return true;
        if (isArithmetic(a) && isArithmetic(b)) return true;
        if (a instanceof StringType && b instanceof StringType) return true;
        if (a instanceof CharType && b instanceof CharType) return true;
        if (a instanceof BooleanType && b instanceof BooleanType) return true;
        return false;
    }

    public static boolean isCastCompatible(Type src, Type dst) {
        if (src.equals(dst)) return true;
        if (isArithmetic(src) && isArithmetic(dst)) return true;
        if (src instanceof StringType && dst instanceof StringType) return true;
        if (src instanceof CharType && dst instanceof CharType) return true;
        if ((src instanceof CharType && dst instanceof IntType) ||
                (src instanceof IntType && dst instanceof CharType)) return true;
        if (src instanceof BooleanType && dst instanceof BooleanType) return true;
        return false;
    }
}
